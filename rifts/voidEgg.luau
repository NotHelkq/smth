local httpRequest =
    (syn and syn.request) or
    (http and http.request) or
    (http_request) or
    (fluxus and fluxus.request) or
    (request)

if not httpRequest then
    warn("‚ö†Ô∏è No supported HTTP request method found!")
    return
end

local player = game.Players.LocalPlayer
local httpService = game:GetService("HttpService")

local islandName = " Void Egg"
local rift = workspace.Rendered.Rifts:FindFirstChild("void-egg")
local luck = rift.Display.SurfaceGui.Icon.Luck.Text
local timer = rift.Display.SurfaceGui.Timer.Text
local title = luck .. islandName
local function sendWebhook()
    local pos = rift.EggPlatformSpawn.WorldPivot.Position
    local rPos = Vector3.new(
        math.floor(pos.X + 0.5),
        math.floor(pos.Y + 0.5),
        math.floor(pos.Z + 0.5)
    )
    local desc = string.format("‚ùì** Island Position : ** X = %d, Y = %d, Z = %d ‚ùì\n", rPos.X, rPos.Y, rPos.Z)

    local time = os.time()
    desc = desc .. "üïõ **Time Found : ** <t:" .. time .. ":f> üïõ \n"

    local despawntime = 0
    local numStr, unit = string.match(timer, "^(%d+)[%s%p]*(%a*)")
    if numStr then
        local num = tonumber(numStr)
        unit = unit and unit:lower() or ""  
        if unit:find("minute") or unit == "" then
            despawntime = num * 60
        else
            despawntime = 0
        end
    else
        despawntime = 0
    end
    local despawn = time + despawntime
    desc = desc .. "üïõ ** Despawns : ** <t:" .. despawn .. ":f> üïõ"

    local data = {
        ["content"] = "<@" .. getgenv().Config.UserID .. ">",
        ["embeds"] = {{
            ["title"] = "üçÄ " .. title .. " üçÄ",
            ["description"] = desc,
            ["color"] = 16711680
        }}
    }

    httpRequest({
        Url = getgenv().Config.LuckyEggsWebhookLink,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = httpService:JSONEncode(data)
    })
end

sendWebhook()
